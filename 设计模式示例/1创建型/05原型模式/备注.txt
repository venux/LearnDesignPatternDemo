参考：
1.http://www.cnblogs.com/zhili/p/PrototypePattern.html
2.http://www.cnblogs.com/zhenyulu/articles/39257.html
3.http://blog.csdn.net/zhengzhb/article/details/7375966



原型模式：

在软件系统中，当创建一个类的实例的过程很昂贵或很复杂，并且我们需要创建多个这样类的实例时，如果我们用new操作符去创建这样的类实例，这未免会增加创建类的复杂度和耗费更多的内存空间，因为这样在内存中分配了多个一样的类实例对象，然后如果采用工厂模式来创建这样的系统的话，随着产品类的不断增加，导致子类的数量不断增多，反而增加了系统复杂程度，所以在这里使用工厂模式来封装类创建过程并不合适，然而原型模式可以很好地解决这个问题，因为每个类实例都是相同的，当我们需要多个相同的类实例时，没必要每次都使用new运算符去创建相同的类实例对象，此时我们一般思路就是想——只创建一个类实例对象，如果后面需要更多这样的实例，可以通过对原来对象拷贝一份来完成创建，这样在内存中不需要创建多个相同的类实例，从而减少内存的消耗和达到类实例的复用。
原型模式用一个原型对象来指明所要创建的对象类型，然后用复制这个原型对象的方法来创建出更多的同类型对象，它与工厂方法模式的实现非常相似，其中原型模式中的Clone方法就类似工厂方法模式中的工厂方法，只是工厂方法模式的工厂方法是通过new运算符重新创建一个新的对象（相当于原型模式的深拷贝实现），而原型模式是通过调用Memberw
“原型实际上是动态抽取当前对象运行时的状态”。



#6楼 2004-09-19 17:33  jcaomao 
我看不出来在类内部做一个clone方法生成新实例，和用 new 生成一个新实例有什么不一样，能解释一下吗？
#7楼 2004-09-20 09:27  吕震宇 
还是从构造函数说起：构造函数相当于对类实例的一个初始化操作，如果构造函数的执行时间很长，例如获取一些远程配置信息之类。如果每NEW一次，都需要执行一次构造函数，那么无疑效率是很低的。如果配置信息不发生变化的化，克隆是最好的办法。
#8楼 2004-09-20 14:17  jcaomao 
谢谢， 不过我在csdn上插了一下也有人问这个问题，其实有一个人的回答我觉得更贴切于这个模式。“原型实际上是动态抽取当前对象运行时的状态”，我觉得这个才是原型的本意。
#9楼[楼主] 2004-09-20 14:32  吕震宇   
不错！长见识了！谢谢！



浅拷贝和深拷贝区别：

浅拷贝是指当对象的字段值被拷贝时，字段引用的对象不会被拷贝。例如，如果一个对象有一个指向字符串的字段，并且我们对该对象做了一个浅拷贝，那么这两个对象将引用同一个字符串，而深拷贝是对对象实例中字段引用的对象也进行拷贝，如果一个对象有一个指向字符串的字段，并且我们对该对象进行了深拷贝的话，那么我们将创建一个对象和一个新的字符串，新的对象将引用新的字符串。也就是说，执行深拷贝创建的新对象和原来对象不会共享任何东西，改变一个对象对另外一个对象没有任何影响，而执行浅拷贝创建的新对象与原来对象共享成员，改变一个对象，另外一个对象的成员也会改变。



原型模式的优点有：

1.原型模式向客户隐藏了创建新实例的复杂性。
2.原型模式允许动态增加或较少产品类。由于创建产品类实例的方法是产品类内部具有的，因此增加新产品对整个结构没有影响。
3.原型模式简化了实例的创建结构，工厂方法模式需要有一个与产品类等级结构相同的等级结构，而原型模式不需要这样。
4.产品类不需要事先确定产品的等级结构，因为原型模式适用于任何的等级结构。
5、Prototype模式允许动态增加或减少产品类。
6、Portotype模式具有给一个应用软件动态加载新功能的能力。由于Prototype的独立性较高，可以很容易动态加载新功能而不影响老系统。

原型模式的缺点有：
1.每个类必须配备一个克隆方法。
2. 配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的间接对象，或者引用含有循环结构的时候。
