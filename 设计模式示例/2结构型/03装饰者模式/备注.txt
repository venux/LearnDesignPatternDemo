参考：
1.http://www.cnblogs.com/zhili/p/DecoratorPattern.html


在装饰者模式中各个角色有：
•抽象构件（Phone）角色：给出一个抽象接口，以规范准备接受附加责任的对象。
•具体构件（AppPhone）角色：定义一个将要接收附加责任的类。
•装饰（Dicorator）角色：持有一个构件（Component）对象的实例，并定义一个与抽象构件接口一致的接口。
•具体装饰（Sticker和Accessories）角色：负责给构件对象 ”贴上“附加的责任。
 

装饰者模式的优缺点

优点：
1.装饰这模式和继承的目的都是扩展对象的功能，但装饰者模式比继承更灵活
2.通过使用不同的具体装饰类以及这些类的排列组合，设计师可以创造出很多不同行为的组合
3.装饰者模式有很好地可扩展性

缺点：装饰者模式会导致设计中出现许多小对象，如果过度使用，会让程序变的更复杂。并且更多的对象会是的差错变得困难，特别是这些对象看上去都很像。


使用场景

下面让我们看看装饰者模式具体在哪些情况下使用，在以下情况下应当使用装饰者模式：
1.需要扩展一个类的功能或给一个类增加附加责任。
2.需要动态地给一个对象增加功能，这些功能可以再动态地撤销。
3.需要增加由一些基本功能的排列组合而产生的非常大量的功能


装饰者模式采用对象组合而非继承的方式实现了再运行时动态地扩展对象功能的能力，而且可以根据需要扩展多个功能，避免了单独使用继承带来的 ”灵活性差“和”多子类衍生问题“。同时它很好地符合面向对象设计原则中 ”优先使用对象组合而非继承“和”开放-封闭“原则。
