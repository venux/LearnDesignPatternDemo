参考：
1.http://www.cnblogs.com/zhili/p/BridgePattern.html
2.http://www.cnblogs.com/zhenyulu/articles/62720.html
3.http://www.cnblogs.com/zhenyulu/articles/67016.html#!comments


桥接模式

优点：

把抽象接口与其实现解耦。
抽象和实现可以独立扩展，不会影响到对方。
实现细节对客户透明，对用于隐藏了具体实现细节。

缺点：增加了系统的复杂度



使用场景:

1.如果一个系统需要在构件的抽象化角色和具体化角色之间添加更多的灵活性，避免在两个层次之间建立静态的联系。
2.设计要求实现化角色的任何改变不应当影响客户端，或者实现化角色的改变对客户端是完全透明的。
3.需要跨越多个平台的图形和窗口系统上。
4.一个类存在两个独立变化的维度，且两个维度都需要进行扩展。



桥接模式例子:

三层架构中就应用了桥接模式，三层架构中的业务逻辑层BLL中通过桥接模式与数据操作层解耦（DAL），其实现方式就是在BLL层中引用了DAL层中一个引用。这样数据操作的实现可以在不改变客户端代码的情况下动态进行更换。



桥梁模式所涉及的角色有：
•抽象化(Abstraction)角色：抽象化给出的定义，并保存一个对实现化对象的引用。 
•修正抽象化(Refined Abstraction)角色：扩展抽象化角色，改变和修正父类对抽象化的定义。 
•实现化(Implementor)角色：这个角色给出实现化角色的接口，但不给出具体的实现。必须指出的是，这个接口不一定和抽象化角色的接口定义相同，实际上，这两个接口可以非常不一样。实现化角色应当只给出底层操作，而抽象化角色应当只给出基于底层操作的更高一层的操作。 
•具体实现化(Concrete Implementor)角色：这个角色给出实现化角色接口的具体实现。



在以下的情况下应当使用桥梁模式：
•如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的联系。 
•设计要求实现化角色的任何改变不应当影响客户端，或者说实现化角色的改变对客户端是完全透明的。 
•一个构件有多于一个的抽象化角色和实现化角色，系统需要它们之间进行动态耦合。 
•虽然在系统中使用继承是没有问题的，但是由于抽象化角色和具体化角色需要独立变化，设计要求需要独立管理这两者。
