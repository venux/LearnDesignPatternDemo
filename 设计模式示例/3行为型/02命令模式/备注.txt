参考：
1.http://www.cnblogs.com/zhili/p/CommandPattern.html
2.http://www.cnblogs.com/zhenyulu/articles/69858.html


定义:

命令模式属于对象的行为型模式。命令模式是把一个操作或者行为抽象为一个对象中，通过对命令的抽象化来使得发出命令的责任和执行命令的责任分隔开。命令模式的实现可以提供命令的撤销和恢复功能。



角色:
•客户（Client）角色：创建了一个具体命令(ConcreteCommand)对象并确定其接收者。 
•命令（Command）角色：声明了一个给所有具体命令类的抽象接口。这是一个抽象角色。 
•具体命令（ConcreteCommand）角色：定义一个接受者和行为之间的弱耦合；实现Execute()方法，负责调用接收考的相应操作。Execute()方法通常叫做执方法。 
•请求者（Invoker）角色：负责调用命令对象执行请求，相关的方法叫做行动方法。 
•接收者（Receiver）角色：负责具体实施和执行一个请求。任何一个类都可以成为接收者，实施和执行请求的方法叫做行动方法。




在下面的情况下应当考虑使用命令模式：
1、使用命令模式作为"CallBack"在面向对象系统中的替代。"CallBack"讲的便是先将一个函数登记上，然后在以后调用此函数。
2、需要在不同的时间指定请求、将请求排队。一个命令对象和原先的请求发出者可以有不同的生命期。换言之，原先的请求发出者可能已经不在了，而命令对象本身仍然是活动的。这时命令的接收者可以是在本地，也可以在网络的另外一个地址。命令对象可以在串形化之后传送到另外一台机器上去。
3、系统需要支持命令的撤消(undo)。命令对象可以把状态存储起来，等到客户端需要撤销命令所产生的效果时，可以调用undo()方法，把命令所产生的效果撤销掉。命令对象还可以提供redo()方法，以供客户端在需要时，再重新实施命令效果。
4、如果一个系统要将系统中所有的数据更新到日志里，以便在系统崩溃时，可以根据日志里读回所有的数据更新命令，重新调用Execute()方法一条一条执行这些命令，从而恢复系统在崩溃前所做的数据更新。
5、一个系统需要支持交易(Transaction)。一个交易结构封装了一组数据更新命令。使用命令模式来实现交易结构可以使系统增加新的交易类型。




优缺点:

优点：
•命令模式使新的命令很容易地被加入到系统里。 
•允许接收请求的一方决定是否要否决（Veto）请求。 
•能较容易地设计-个命令队列。 
•可以容易地实现对请求的Undo和Redo。 
•在需要的情况下，可以较容易地将命令记入日志。 
•命令模式把请求一个操作的对象与知道怎么执行一个操作的对象分割开。 
•命令类与其他任何别的类一样，可以修改和推广。 
•你可以把命令对象聚合在一起，合成为合成命令。比如宏命令便是合成命令的例子。合成命令是合成模式的应用。 
•由于加进新的具体命令类不影响其他的类，因此增加新的具体命令类很容易。

缺点：
•使用命令模式会导致某些系统有过多的具体命令类。某些系统可能需要几十个，几百个甚至几千个具体命令类，这会使命令模式在这样的系统里变得不实际。
