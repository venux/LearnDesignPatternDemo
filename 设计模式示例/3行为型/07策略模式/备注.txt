参考：
1.http://www.cnblogs.com/zhili/p/StragetyPattern.html



概述

策略模式是针对一组算法，将每个算法封装到具有公共接口的独立的类中，从而使它们可以相互替换。策略模式使得算法可以在不影响到客户端的情况下发生变化。



角色：
•环境角色（Context）：持有一个Strategy类的引用
•抽象策略角色（Strategy）：这是一个抽象角色，通常由一个接口或抽象类来实现。此角色给出所有具体策略类所需实现的接口。
•具体策略角色（ConcreteStrategy）：包装了相关算法或行为。



适用场景

•一个系统需要动态地在几种算法中选择一种的情况下。那么这些算法可以包装到一个个具体的算法类里面，并为这些具体的算法类提供一个统一的接口。
•如果一个对象有很多的行为，如果不使用合适的模式，这些行为就只好使用多重的if-else语句来实现，此时，可以使用策略模式，把这些行为转移到相应的具体策略类里面，就可以避免使用难以维护的多重条件选择语句，并体现面向对象涉及的概念。

优缺点

优点：
•策略类之间可以自由切换。由于策略类都实现同一个接口，所以使它们之间可以自由切换。
•易于扩展。增加一个新的策略只需要添加一个具体的策略类即可，基本不需要改变原有的代码。
•避免使用多重条件选择语句，充分体现面向对象设计思想。

缺点：
•客户端必须知道所有的策略类，并自行决定使用哪一个策略类。这点可以考虑使用IOC容器和依赖注入的方式来解决，关于IOC容器和依赖注入（Dependency Inject）的文章可以参考：IoC 容器和Dependency Injection 模式。
•策略模式会造成很多的策略类。
